#include <iostream>
#include <vector>

using namespace std;

int m[10][10];
int n = 9;
int mintav = 999999999 ;
vector<int> utvonal;

bool leall(vector<int> v, int stop)
{

    if (v[v.size()-1] == stop)
    {
        return true;
    }
    else
    {
        return false;
    }
}

bool lehet(int jelenlegi, int kovetkezo, vector<int> v){
    if (m[jelenlegi][kovetkezo] == 0)
    {
        return false;
    }
    for (int i=0; i<v.size(); i++)
    {
        if (v[i] == kovetkezo)
        {
            return false;
        }
    }
    return true;
}

void kiir(vector<int> v)
{
    int tav = 0;
    for(int i=0; i<v.size(); i++)
    {
        tav+= v[i];
    }
    if (tav < mintav) {
        mintav = tav;
        utvonal = v;
    }
    cout << endl;
}

void backtrack(int jelenlegi, vector<int> v, int stop){
    if (leall(v, stop))
    {
        kiir(v);
        return;
    }
    for(int i = 1; i<n; i++){
        if (i!=jelenlegi)
        {
            if (lehet(jelenlegi, i, v)){
                vector<int> tempv = v;
                tempv.push_back(i);
                backtrack(i, tempv, stop);
            }
        }
    }

}

int main()
{
    int start, stop;
    cout << "Kerem kiindulasi csomopontot: " ;
    cin >> start;
    cout << "Kerem a cel csomopontot:";
    cin >> stop;
    int i, j;
    for(i=0; i<n; i++)
    {
        for(j=0; j<n; j++)
        {
            m[i][j]=0;
        }
    }
    m[1][2] = 1;
    m[1][6] = 1;
    m[2][3] = 1;
    m[2][4] = 1;
    m[3][4]= 1;
    m[4][8]= 1;
    m[5][6]= 1;
    m[5][7]= 1;
    m[5][8]= 1;
        vector<int> v;
        v.push_back(start);

        backtrack(start, v, stop );
        if(lehet(start, stop, v)==true){
        for(i = 0; i<utvonal.size(); i++){
            cout << utvonal[i] << " ";
        }}
        else{cout<< "nem lehet";}

    return 0;
}
